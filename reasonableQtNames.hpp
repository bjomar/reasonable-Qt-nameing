/* 
*	Copyright 2018 Björn Marx
*
*	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the
*	Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the 
*	Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
*
*	none, even though a note in the documentation or whereever would be appreciated.
*
*	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
*	PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
*	OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*
*
* project name: reasonable Qt names
* file name: reasonableQtNames.hpp
* 
* This small and stupid wrapper redefines all listed Qt5.11 classes (taken from here: http://doc.qt.io/qt-5/classes.html) to more, seemingly reasonable names,
* including a removal of the annoying leading 'Q'. Have fun with it.
*
*/

#ifndef REASONABLE_QT_NAMES
#define REASONABLE_QT_NAMES

namespace Qt {

	using _3DBars = Q3DBars;
	using _3DCamera = Q3DCamera;
	using _3DInputHandler = Q3DInputHandler;
	using _3DLight = Q3DLight;
	using _3DObject = Q3DObject;
	using _3DScatter = Q3DScatter;
	using _3DScene = Q3DScene;
	using _3DSurface = Q3DSurface;
	using _3DTheme = Q3DTheme;
	using Abstract3DAxis = QAbstract3DAxis;
	using Abstract3DGraph = QAbstract3DGraph;
	using Abstract3DInputHandler = QAbstract3DInputHandler;
	using Abstract3DSeries = QAbstract3DSeries;
	using AbstractAnimation = QAbstractAnimation;
	using AbstractAudioDeviceInfo = QAbstractAudioDeviceInfo;
	using AbstractAudioInput = QAbstractAudioInput;
	using AbstractAudioOutput = QAbstractAudioOutput;
	using AbstractAxis = QAbstractAxis;
	using AbstractBarSeries = QAbstractBarSeries;
	using AbstractButton = QAbstractButton;
	using AbstractDataProxy = QAbstractDataProxy;
	using AbstractEventDispatcher = QAbstractEventDispatcher;
	using AbstractExtensionFactory = QAbstractExtensionFactory;
	using AbstractExtensionManager = QAbstractExtensionManager;
	using AbstractFormBuilder = QAbstractFormBuilder;
	using AbstractGraphicsShapeItem = QAbstractGraphicsShapeItem;
	using AbstractItemDelegate = QAbstractItemDelegate;
	using AbstractItemModel = QAbstractItemModel;
	using AbstractItemModelTester = QAbstractItemModelTester;
	using AbstractItemView = QAbstractItemView;
	using AbstractListModel = QAbstractListModel;
	using AbstractMessageHandler = QAbstractMessageHandler;
	using AbstractNativeEventFilter = QAbstractNativeEventFilter;
	using AbstractNetworkCache = QAbstractNetworkCache;
	using AbstractOAuth = QAbstractOAuth;
	using AbstractOAuth2 = QAbstractOAuth2;
	using AbstractOAuthReplyHandler = QAbstractOAuthReplyHandler;
	using AbstractOpenGLFunctions = QAbstractOpenGLFunctions;
	using AbstractPlanarVideoBuffer = QAbstractPlanarVideoBuffer;
	using AbstractPrintDialog = QAbstractPrintDialog;
	using AbstractProxyModel = QAbstractProxyModel;
	using AbstractScrollArea = QAbstractScrollArea;
	using AbstractSeries = QAbstractSeries;
	using AbstractSlider = QAbstractSlider;
	using AbstractSocket = QAbstractSocket;
	using AbstractSpinBox = QAbstractSpinBox;
	using AbstractState = QAbstractState;
	using AbstractTableModel = QAbstractTableModel;
	using AbstractTextDocumentLayout = QAbstractTextDocumentLayout;
	using AbstractTransition = QAbstractTransition;
	using AbstractUriResolver = QAbstractUriResolver;
	using AbstractVideoBuffer = QAbstractVideoBuffer;
	using AbstractVideoFilter = QAbstractVideoFilter;
	using AbstractVideoSurface = QAbstractVideoSurface;
	using AbstractXmlNodeModel = QAbstractXmlNodeModel;
	using Accelerometer = QAccelerometer;
	using AccelerometerFilter = QAccelerometerFilter;
	using AccelerometerReading = QAccelerometerReading;
	using Accessible = QAccessible;
	using AccessibleActionInterface = QAccessibleActionInterface;
	using AccessibleEditableTextInterface = QAccessibleEditableTextInterface;
	using AccessibleEvent = QAccessibleEvent;
	using AccessibleInterface = QAccessibleInterface;
	using AccessibleObject = QAccessibleObject;
	using AccessiblePlugin = QAccessiblePlugin;
	using AccessibleStateChangeEvent = QAccessibleStateChangeEvent;
	using AccessibleTableCellInterface = QAccessibleTableCellInterface;
	using AccessibleTableInterface = QAccessibleTableInterface;
	using AccessibleTableModelChangeEvent = QAccessibleTableModelChangeEvent;
	using AccessibleTextCursorEvent = QAccessibleTextCursorEvent;
	using AccessibleTextInsertEvent = QAccessibleTextInsertEvent;
	using AccessibleTextInterface = QAccessibleTextInterface;
	using AccessibleTextRemoveEvent = QAccessibleTextRemoveEvent;
	using AccessibleTextSelectionEvent = QAccessibleTextSelectionEvent;
	using AccessibleTextUpdateEvent = QAccessibleTextUpdateEvent;
	using AccessibleValueChangeEvent = QAccessibleValueChangeEvent;
	using AccessibleValueInterface = QAccessibleValueInterface;
	using AccessibleWidget = QAccessibleWidget;
	using Action = QAction;
	using ActionEvent = QActionEvent;
	using ActionGroup = QActionGroup;
	using Altimeter = QAltimeter;
	using AltimeterFilter = QAltimeterFilter;
	using AltimeterReading = QAltimeterReading;
	using AmbientLightFilter = QAmbientLightFilter;
	using AmbientLightReading = QAmbientLightReading;
	using AmbientLightSensor = QAmbientLightSensor;
	using AmbientTemperatureFilter = QAmbientTemperatureFilter;
	using AmbientTemperatureReading = QAmbientTemperatureReading;
	using AmbientTemperatureSensor = QAmbientTemperatureSensor;
	using AndroidActivityResultReceiver = QAndroidActivityResultReceiver;
	using AndroidBinder = QAndroidBinder;
	using AndroidIntent = QAndroidIntent;
	using AndroidJniEnvironment = QAndroidJniEnvironment;
	using AndroidJniExceptionCleaner = QAndroidJniExceptionCleaner;
	using AndroidJniObject = QAndroidJniObject;
	using AndroidParcel = QAndroidParcel;
	using AndroidService = QAndroidService;
	using AndroidServiceConnection = QAndroidServiceConnection;
	using AnimationGroup = QAnimationGroup;
	using Application = QApplication;
	using AreaLegendMarker = QAreaLegendMarker;
	using AreaSeries = QAreaSeries;
	using AssociativeIterable = QAssociativeIterable;
	using AtomicInt = QAtomicInt;
	using AtomicInteger = QAtomicInteger;
	using AtomicPointer = QAtomicPointer;
	using AudioBuffer = QAudioBuffer;
	using AudioDecoder = QAudioDecoder;
	using AudioDecoderControl = QAudioDecoderControl;
	using AudioDeviceInfo = QAudioDeviceInfo;
	using AudioEncoderSettings = QAudioEncoderSettings;
	using AudioEncoderSettingsControl = QAudioEncoderSettingsControl;
	using AudioFormat = QAudioFormat;
	using AudioInput = QAudioInput;
	using AudioInputSelectorControl = QAudioInputSelectorControl;
	using AudioOutput = QAudioOutput;
	using AudioOutputSelectorControl = QAudioOutputSelectorControl;
	using AudioProbe = QAudioProbe;
	using AudioRecorder = QAudioRecorder;
	using AudioRoleControl = QAudioRoleControl;
	using AudioSystemPlugin = QAudioSystemPlugin;
	using Authenticator = QAuthenticator;
	using AxAggregated = QAxAggregated;
	using AxBase = QAxBase;
	using AxBindable = QAxBindable;
	using AxFactory = QAxFactory;
	using AxObject = QAxObject;
	using AxScript = QAxScript;
	using AxScriptEngine = QAxScriptEngine;
	using AxScriptManager = QAxScriptManager;
	using AxSelect = QAxSelect;
	using AxWidget = QAxWidget;
	using AssignmentInfo = AssignmentInfo;
	using AbstractAspect = QAbstractAspect;
	using AbstractSkeleton = QAbstractSkeleton;
	using Armature = QArmature;
	using AspectEngine = QAspectEngine;
	using AspectJob = QAspectJob;
	using AbstractFunctor = QAbstractFunctor;
	using AbstractLight = QAbstractLight;
	using AbstractRayCaster = QAbstractRayCaster;
	using AbstractTexture = QAbstractTexture;
	using AbstractTextureImage = QAbstractTextureImage;
	using AlphaCoverage = QAlphaCoverage;
	using AlphaTest = QAlphaTest;
	using Attribute = QAttribute;
	using BackingStore = QBackingStore;
	using Bar3DSeries = QBar3DSeries;
	using BarCategoryAxis = QBarCategoryAxis;
	using BarDataItem = QBarDataItem;
	using BarDataProxy = QBarDataProxy;
	using BarLegendMarker = QBarLegendMarker;
	using BarSeries = QBarSeries;
	using BarSet = QBarSet;
	using BasicTimer = QBasicTimer;
	using BEInteger = QBEInteger;
	using BitArray = QBitArray;
	using Bitmap = QBitmap;
	using BluetoothAddress = QBluetoothAddress;
	using BluetoothDeviceDiscoveryAgent = QBluetoothDeviceDiscoveryAgent;
	using BluetoothDeviceInfo = QBluetoothDeviceInfo;
	using BluetoothHostInfo = QBluetoothHostInfo;
	using BluetoothLocalDevice = QBluetoothLocalDevice;
	using BluetoothServer = QBluetoothServer;
	using BluetoothServiceDiscoveryAgent = QBluetoothServiceDiscoveryAgent;
	using BluetoothServiceInfo = QBluetoothServiceInfo;
	using BluetoothSocket = QBluetoothSocket;
	using BluetoothTransferManager = QBluetoothTransferManager;
	using BluetoothTransferReply = QBluetoothTransferReply;
	using BluetoothTransferRequest = QBluetoothTransferRequest;
	using BluetoothUuid = QBluetoothUuid;
	using BoxLayout = QBoxLayout;
	using BoxPlotLegendMarker = QBoxPlotLegendMarker;
	using BoxPlotSeries = QBoxPlotSeries;
	using BoxSet = QBoxSet;
	using Brush = QBrush;
	using Buffer = QBuffer;
	using ButtonGroup = QButtonGroup;
	using ByteArray = QByteArray;
	using ByteArrayList = QByteArrayList;
	using ByteArrayMatcher = QByteArrayMatcher;
	using BackendNode = QBackendNode;
	using BackendNodeMapper = QBackendNodeMapper;
	using BlendEquation = QBlendEquation;
	using BlendEquationArguments = QBlendEquationArguments;
	using BlitFramebuffer = QBlitFramebuffer;
	using Buffer = QBuffer;
	using BufferCapture = QBufferCapture;
	using BufferDataGenerator = QBufferDataGenerator;
	using Cache = QCache;
	using CalendarWidget = QCalendarWidget;
	using Camera = QCamera;
	using CameraCaptureBufferFormatControl = QCameraCaptureBufferFormatControl;
	using CameraCaptureDestinationControl = QCameraCaptureDestinationControl;
	using CameraControl = QCameraControl;
	using CameraExposure = QCameraExposure;
	using CameraExposureControl = QCameraExposureControl;
	using CameraFeedbackControl = QCameraFeedbackControl;
	using CameraFlashControl = QCameraFlashControl;
	using CameraFocus = QCameraFocus;
	using CameraFocusControl = QCameraFocusControl;
	using CameraFocusZone = QCameraFocusZone;
	using CameraImageCapture = QCameraImageCapture;
	using CameraImageCaptureControl = QCameraImageCaptureControl;
	using CameraImageProcessing = QCameraImageProcessing;
	using CameraImageProcessingControl = QCameraImageProcessingControl;
	using CameraInfo = QCameraInfo;
	using CameraInfoControl = QCameraInfoControl;
	using CameraLocksControl = QCameraLocksControl;
	using CameraViewfinderSettings = QCameraViewfinderSettings;
	using CameraViewfinderSettingsControl = QCameraViewfinderSettingsControl;
	using CameraViewfinderSettingsControl2 = QCameraViewfinderSettingsControl2;
	using CameraZoomControl = QCameraZoomControl;
	using CanBus = QCanBus;
	using CanBusDevice = QCanBusDevice;
	using CanBusDeviceInfo = QCanBusDeviceInfo;
	using CanBusFactory = QCanBusFactory;
	using CanBusFactoryV2 = QCanBusFactoryV2;
	using CanBusFrame = QCanBusFrame;
	using CandlestickLegendMarker = QCandlestickLegendMarker;
	using CandlestickModelMapper = QCandlestickModelMapper;
	using CandlestickSeries = QCandlestickSeries;
	using CandlestickSet = QCandlestickSet;
	using Category3DAxis = QCategory3DAxis;
	using CategoryAxis = QCategoryAxis;
	using Char = QChar;
	using Chart = QChart;
	using ChartView = QChartView;
	using CheckBox = QCheckBox;
	using ChildEvent = QChildEvent;
	using Clipboard = QClipboard;
	using CloseEvent = QCloseEvent;
	using CocoaNativeContext = QCocoaNativeContext;
	using CocoaWindowFunctions = QCocoaWindowFunctions;
	using Collator = QCollator;
	using CollatorSortKey = QCollatorSortKey;
	using Color = QColor;
	using ColorDialog = QColorDialog;
	using Colormap = QColormap;
	using ColumnView = QColumnView;
	using ComboBox = QComboBox;
	using CommandLineOption = QCommandLineOption;
	using CommandLineParser = QCommandLineParser;
	using CommandLinkButton = QCommandLinkButton;
	using CommonStyle = QCommonStyle;
	using Compass = QCompass;
	using CompassFilter = QCompassFilter;
	using CompassReading = QCompassReading;
	using Completer = QCompleter;
	using ConicalGradient = QConicalGradient;
	using ContextMenuEvent = QContextMenuEvent;
	using ContiguousCache = QContiguousCache;
	using CoreApplication = QCoreApplication;
	using CryptographicHash = QCryptographicHash;
	using Cursor = QCursor;
	using Custom3DItem = QCustom3DItem;
	using Custom3DLabel = QCustom3DLabel;
	using Custom3DVolume = QCustom3DVolume;
	using CustomAudioRoleControl = QCustomAudioRoleControl;
	using ChannelMappingCreatedChange = QChannelMappingCreatedChange;
	using ClipBlendNodeCreatedChange = QClipBlendNodeCreatedChange;
	using Component = QComponent;
	using ComponentAddedChange = QComponentAddedChange;
	using ComponentRemovedChange = QComponentRemovedChange;
	using Camera = QCamera;
	using CameraLens = QCameraLens;
	using CameraSelector = QCameraSelector;
	using ClearBuffers = QClearBuffers;
	using ClipPlane = QClipPlane;
	using ColorMask = QColorMask;
	using ComputeCommand = QComputeCommand;
	using CullFace = QCullFace;
	using QDataStream = DQDataStream;
	using DataWidgetMapper = QDataWidgetMapper;
	using Date = QDate;
	using DateEdit = QDateEdit;
	using DateTime = QDateTime;
	using DateTimeAxis = QDateTimeAxis;
	using DateTimeEdit = QDateTimeEdit;
	using DBusAbstractAdaptor = QDBusAbstractAdaptor;
	using DBusAbstractInterface = QDBusAbstractInterface;
	using DBusArgument = QDBusArgument;
	using DBusConnection = QDBusConnection;
	using DBusConnectionInterface = QDBusConnectionInterface;
	using DBusContext = QDBusContext;
	using DBusError = QDBusError;
	using DBusInterface = QDBusInterface;
	using DBusMessage = QDBusMessage;
	using DBusObjectPath = QDBusObjectPath;
	using DBusPendingCall = QDBusPendingCall;
	using DBusPendingCallWatcher = QDBusPendingCallWatcher;
	using DBusPendingReply = QDBusPendingReply;
	using DBusReply = QDBusReply;
	using DBusServer = QDBusServer;
	using DBusServiceWatcher = QDBusServiceWatcher;
	using DBusSignature = QDBusSignature;
	using DBusUnixFileDescriptor = QDBusUnixFileDescriptor;
	using DBusVariant = QDBusVariant;
	using DBusVirtualObject = QDBusVirtualObject;
	using DeadlineTimer = QDeadlineTimer;
	using Debug = QDebug;
	using DebugStateSaver = QDebugStateSaver;
	using DesignerActionEditorInterface = QDesignerActionEditorInterface;
	using DesignerContainerExtension = QDesignerContainerExtension;
	using DesignerCustomWidgetCollectionInterface = QDesignerCustomWidgetCollectionInterface;
	using DesignerCustomWidgetInterface = QDesignerCustomWidgetInterface;
	using DesignerDynamicPropertySheetExtension = QDesignerDynamicPropertySheetExtension;
	using DesignerFormEditorInterface = QDesignerFormEditorInterface;
	using DesignerFormWindowCursorInterface = QDesignerFormWindowCursorInterface;
	using DesignerFormWindowInterface = QDesignerFormWindowInterface;
	using DesignerFormWindowManagerInterface = QDesignerFormWindowManagerInterface;
	using DesignerMemberSheetExtension = QDesignerMemberSheetExtension;
	using DesignerObjectInspectorInterface = QDesignerObjectInspectorInterface;
	using DesignerPropertyEditorInterface = QDesignerPropertyEditorInterface;
	using DesignerPropertySheetExtension = QDesignerPropertySheetExtension;
	using DesignerTaskMenuExtension = QDesignerTaskMenuExtension;
	using DesignerWidgetBoxInterface = QDesignerWidgetBoxInterface;
	using DesktopServices = QDesktopServices;
	using DesktopWidget = QDesktopWidget;
	using Dial = QDial;
	using Dialog = QDialog;
	using DialogButtonBox = QDialogButtonBox;
	using Dir = QDir;
	using DirIterator = QDirIterator;
	using DirModel = QDirModel;
	using DistanceFilter = QDistanceFilter;
	using DistanceReading = QDistanceReading;
	using DistanceSensor = QDistanceSensor;
	using DnsDomainNameRecord = QDnsDomainNameRecord;
	using DnsHostAddressRecord = QDnsHostAddressRecord;
	using DnsLookup = QDnsLookup;
	using DnsMailExchangeRecord = QDnsMailExchangeRecord;
	using DnsServiceRecord = QDnsServiceRecord;
	using DnsTextRecord = QDnsTextRecord;
	using DockWidget = QDockWidget;
	using DomAttr = QDomAttr;
	using DomCDATASection = QDomCDATASection;
	using DomCharacterData = QDomCharacterData;
	using DomComment = QDomComment;
	using DomDocument = QDomDocument;
	using DomDocumentFragment = QDomDocumentFragment;
	using DomDocumentType = QDomDocumentType;
	using DomElement = QDomElement;
	using DomEntity = QDomEntity;
	using DomEntityReference = QDomEntityReference;
	using DomImplementation = QDomImplementation;
	using DomNamedNodeMap = QDomNamedNodeMap;
	using DomNode = QDomNode;
	using DomNodeList = QDomNodeList;
	using DomNotation = QDomNotation;
	using DomProcessingInstruction = QDomProcessingInstruction;
	using DomText = QDomText;
	using DoubleSpinBox = QDoubleSpinBox;
	using DoubleValidator = QDoubleValidator;
	using Drag = QDrag;
	using DragEnterEvent = QDragEnterEvent;
	using DragLeaveEvent = QDragLeaveEvent;
	using DragMoveEvent = QDragMoveEvent;
	using DropEvent = QDropEvent;
	using DynamicPropertyChangeEvent = QDynamicPropertyChangeEvent;
	using DynamicPropertyUpdatedChange = QDynamicPropertyUpdatedChange;
	using DepthTest = QDepthTest;
	using DirectionalLight = QDirectionalLight;
	using DispatchCompute = QDispatchCompute;
	using Dithering = QDithering;
	using EasingCurve = EQEasingCurve;
	using EglFSFunctions = QEglFSFunctions;
	using EGLNativeContext = QEGLNativeContext;
	using ElapsedTimer = QElapsedTimer;
	using EnableSharedFromThis = QEnableSharedFromThis;
	using EnterEvent = QEnterEvent;
	using ErrorMessage = QErrorMessage;
	using Event = QEvent;
	using EventLoop = QEventLoop;
	using EventLoopLocker = QEventLoopLocker;
	using EventTransition = QEventTransition;
	using Exception = QException;
	using ExplicitlySharedDataPointer = QExplicitlySharedDataPointer;
	using ExposeEvent = QExposeEvent;
	using ExtensionFactory = QExtensionFactory;
	using ExtensionManager = QExtensionManager;
	using EvaluatorInfo = EvaluatorInfo;
	using Entity = QEntity;
	using Effect = QEffect;
	using EnvironmentLight = QEnvironmentLight;
	using File = QFile;
	using FileDevice = QFileDevice;
	using FileDialog = QFileDialog;
	using FileIconProvider = QFileIconProvider;
	using FileInfo = QFileInfo;
	using FileOpenEvent = QFileOpenEvent;
	using FileSelector = QFileSelector;
	using FileSystemModel = QFileSystemModel;
	using FileSystemWatcher = QFileSystemWatcher;
	using FinalState = QFinalState;
	using Flag = QFlag;
	using Flags = QFlags;
	using FocusEvent = QFocusEvent;
	using FocusFrame = QFocusFrame;
	using Font = QFont;
	using FontComboBox = QFontComboBox;
	using FontDatabase = QFontDatabase;
	using FontDialog = QFontDialog;
	using FontInfo = QFontInfo;
	using FontMetrics = QFontMetrics;
	using FontMetricsF = QFontMetricsF;
	using FormBuilder = QFormBuilder;
	using FormLayout = QFormLayout;
	using Frame = QFrame;
	using Future = QFuture;
	using FutureIterator = QFutureIterator;
	using FutureSynchronizer = QFutureSynchronizer;
	using FutureWatcher = QFutureWatcher;
	using ForeachInfo = ForeachInfo;
	using FbxGeometryLoader = FbxGeometryLoader;
	using FunctorType = FunctorType;
	using FilterKey = QFilterKey;
	using FrameGraphNode = QFrameGraphNode;
	using FrameGraphNodeCreatedChange = QFrameGraphNodeCreatedChange;
	using FrameGraphNodeCreatedChangeBase = QFrameGraphNodeCreatedChangeBase;
	using FrontFace = QFrontFace;
	using FrustumCulling = QFrustumCulling;
	using Gamepad = QGamepad;
	using GamepadKeyNavigation = QGamepadKeyNavigation;
	using GamepadManager = QGamepadManager;
	using GenericArgument = QGenericArgument;
	using GenericMatrix = QGenericMatrix;
	using GenericPlugin = QGenericPlugin;
	using GenericPluginFactory = QGenericPluginFactory;
	using GenericReturnArgument = QGenericReturnArgument;
	using GeoAddress = QGeoAddress;
	using GeoAreaMonitorInfo = QGeoAreaMonitorInfo;
	using GeoAreaMonitorSource = QGeoAreaMonitorSource;
	using GeoCircle = QGeoCircle;
	using GeoCodeReply = QGeoCodeReply;
	using GeoCodingManager = QGeoCodingManager;
	using GeoCodingManagerEngine = QGeoCodingManagerEngine;
	using GeoCoordinate = QGeoCoordinate;
	using GeoLocation = QGeoLocation;
	using GeoManeuver = QGeoManeuver;
	using GeoPath = QGeoPath;
	using GeoPolygon = QGeoPolygon;
	using GeoPositionInfo = QGeoPositionInfo;
	using GeoPositionInfoSource = QGeoPositionInfoSource;
	using GeoPositionInfoSourceFactory = QGeoPositionInfoSourceFactory;
	using GeoRectangle = QGeoRectangle;
	using GeoRoute = QGeoRoute;
	using GeoRouteReply = QGeoRouteReply;
	using GeoRouteRequest = QGeoRouteRequest;
	using GeoRouteSegment = QGeoRouteSegment;
	using GeoRoutingManager = QGeoRoutingManager;
	using GeoRoutingManagerEngine = QGeoRoutingManagerEngine;
	using GeoSatelliteInfo = QGeoSatelliteInfo;
	using GeoSatelliteInfoSource = QGeoSatelliteInfoSource;
	using GeoServiceProvider = QGeoServiceProvider;
	using GeoServiceProviderFactory = QGeoServiceProviderFactory;
	using GeoServiceProviderFactoryV2 = QGeoServiceProviderFactoryV2;
	using GeoShape = QGeoShape;
	using Gesture = QGesture;
	using GestureEvent = QGestureEvent;
	using GestureRecognizer = QGestureRecognizer;
	using GLBuffer = QGLBuffer;
	using GLColormap = QGLColormap;
	using GLContext = QGLContext;
	using GLFormat = QGLFormat;
	using GLFramebufferObject = QGLFramebufferObject;
	using GLFramebufferObjectFormat = QGLFramebufferObjectFormat;
	using GLFunctions = QGLFunctions;
	using GlobalStatic = QGlobalStatic;
	using GLPixelBuffer = QGLPixelBuffer;
	using GLShader = QGLShader;
	using GLShaderProgram = QGLShaderProgram;
	using GLWidget = QGLWidget;
	using GLXNativeContext = QGLXNativeContext;
	using GlyphRun = QGlyphRun;
	using Gradient = QGradient;
	using GraphicsAnchor = QGraphicsAnchor;
	using GraphicsAnchorLayout = QGraphicsAnchorLayout;
	using GraphicsBlurEffect = QGraphicsBlurEffect;
	using GraphicsColorizeEffect = QGraphicsColorizeEffect;
	using GraphicsDropShadowEffect = QGraphicsDropShadowEffect;
	using GraphicsEffect = QGraphicsEffect;
	using GraphicsEllipseItem = QGraphicsEllipseItem;
	using GraphicsGridLayout = QGraphicsGridLayout;
	using GraphicsItem = QGraphicsItem;
	using GraphicsItemAnimation = QGraphicsItemAnimation;
	using GraphicsItemGroup = QGraphicsItemGroup;
	using GraphicsLayout = QGraphicsLayout;
	using GraphicsLayoutItem = QGraphicsLayoutItem;
	using GraphicsLinearLayout = QGraphicsLinearLayout;
	using GraphicsLineItem = QGraphicsLineItem;
	using GraphicsObject = QGraphicsObject;
	using GraphicsOpacityEffect = QGraphicsOpacityEffect;
	using GraphicsPathItem = QGraphicsPathItem;
	using GraphicsPixmapItem = QGraphicsPixmapItem;
	using GraphicsPolygonItem = QGraphicsPolygonItem;
	using GraphicsProxyWidget = QGraphicsProxyWidget;
	using GraphicsRectItem = QGraphicsRectItem;
	using GraphicsRotation = QGraphicsRotation;
	using GraphicsScale = QGraphicsScale;
	using GraphicsScene = QGraphicsScene;
	using GraphicsSceneContextMenuEvent = QGraphicsSceneContextMenuEvent;
	using GraphicsSceneDragDropEvent = QGraphicsSceneDragDropEvent;
	using GraphicsSceneEvent = QGraphicsSceneEvent;
	using GraphicsSceneHelpEvent = QGraphicsSceneHelpEvent;
	using GraphicsSceneHoverEvent = QGraphicsSceneHoverEvent;
	using GraphicsSceneMouseEvent = QGraphicsSceneMouseEvent;
	using GraphicsSceneMoveEvent = QGraphicsSceneMoveEvent;
	using GraphicsSceneResizeEvent = QGraphicsSceneResizeEvent;
	using GraphicsSceneWheelEvent = QGraphicsSceneWheelEvent;
	using GraphicsSimpleTextItem = QGraphicsSimpleTextItem;
	using GraphicsSvgItem = QGraphicsSvgItem;
	using GraphicsTextItem = QGraphicsTextItem;
	using GraphicsTransform = QGraphicsTransform;
	using GraphicsView = QGraphicsView;
	using GraphicsWidget = QGraphicsWidget;
	using GridLayout = QGridLayout;
	using GroupBox = QGroupBox;
	using GuiApplication = QGuiApplication;
	using Gyroscope = QGyroscope;
	using GyroscopeFilter = QGyroscopeFilter;
	using GyroscopeReading = QGyroscopeReading;
	using GLTFGeometryLoader = GLTFGeometryLoader;
	using Geometry = QGeometry;
	using GeometryFactory = QGeometryFactory;
	using GeometryRenderer = QGeometryRenderer;
	using GraphicsApiFilter = QGraphicsApiFilter;
	using Hash = QHash;
	using HashIterator = QHashIterator;
	using HBarModelMapper = QHBarModelMapper;
	using HBoxLayout = QHBoxLayout;
	using HBoxPlotModelMapper = QHBoxPlotModelMapper;
	using HCandlestickModelMapper = QHCandlestickModelMapper;
	using HeaderView = QHeaderView;
	using HeightMapSurfaceDataProxy = QHeightMapSurfaceDataProxy;
	using HelpContentItem = QHelpContentItem;
	using HelpContentModel = QHelpContentModel;
	using HelpContentWidget = QHelpContentWidget;
	using HelpEngine = QHelpEngine;
	using HelpEngineCore = QHelpEngineCore;
	using HelpEvent = QHelpEvent;
	using HelpIndexModel = QHelpIndexModel;
	using HelpIndexWidget = QHelpIndexWidget;
	using HelpSearchEngine = QHelpSearchEngine;
	using HelpSearchQuery = QHelpSearchQuery;
	using HelpSearchQueryWidget = QHelpSearchQueryWidget;
	using HelpSearchResult = QHelpSearchResult;
	using HelpSearchResultWidget = QHelpSearchResultWidget;
	using HideEvent = QHideEvent;
	using HistoryState = QHistoryState;
	using HolsterFilter = QHolsterFilter;
	using HolsterReading = QHolsterReading;
	using HolsterSensor = QHolsterSensor;
	using HorizontalBarSeries = QHorizontalBarSeries;
	using HorizontalPercentBarSeries = QHorizontalPercentBarSeries;
	using HorizontalStackedBarSeries = QHorizontalStackedBarSeries;
	using HostAddress = QHostAddress;
	using HostInfo = QHostInfo;
	using HoverEvent = QHoverEvent;
	using HPieModelMapper = QHPieModelMapper;
	using HstsPolicy = QHstsPolicy;
	using HttpMultiPart = QHttpMultiPart;
	using HttpPart = QHttpPart;
	using HumidityFilter = QHumidityFilter;
	using HumidityReading = QHumidityReading;
	using HumiditySensor = QHumiditySensor;
	using HXYModelMapper = QHXYModelMapper;
	using Icon = QIcon;
	using IconDragEvent = QIconDragEvent;
	using IconEngine = QIconEngine;
	using IconEnginePlugin = QIconEnginePlugin;
	using IdentityProxyModel = QIdentityProxyModel;
	using Image = QImage;
	using ImageEncoderControl = QImageEncoderControl;
	using ImageEncoderSettings = QImageEncoderSettings;
	using ImageIOHandler = QImageIOHandler;
	using ImageIOPlugin = QImageIOPlugin;
	using ImageReader = QImageReader;
	using ImageWriter = QImageWriter;
	using InAppProduct = QInAppProduct;
	using InAppStore = QInAppStore;
	using InAppTransaction = QInAppTransaction;
	using InputDialog = QInputDialog;
	using InputEvent = QInputEvent;
	using InputMethod = QInputMethod;
	using InputMethodEvent = QInputMethodEvent;
	using InputMethodQueryEvent = QInputMethodQueryEvent;
	using IntValidator = QIntValidator;
	using IODevice = QIODevice;
	using IRProximityFilter = QIRProximityFilter;
	using IRProximityReading = QIRProximityReading;
	using IRProximitySensor = QIRProximitySensor;
	using ItemDelegate = QItemDelegate;
	using ItemEditorCreator = QItemEditorCreator;
	using ItemEditorCreatorBase = QItemEditorCreatorBase;
	using ItemEditorFactory = QItemEditorFactory;
	using ItemModelBarDataProxy = QItemModelBarDataProxy;
	using ItemModelScatterDataProxy = QItemModelScatterDataProxy;
	using ItemModelSurfaceDataProxy = QItemModelSurfaceDataProxy;
	using ItemSelection = QItemSelection;
	using ItemSelectionModel = QItemSelectionModel;
	using ItemSelectionRange = QItemSelectionRange;
	using InvokeInfo = InvokeInfo;
	using IntermediateResults = IntermediateResults;
	using JSEngine = QJSEngine;
	using JsonArray = QJsonArray;
	using JsonDocument = QJsonDocument;
	using JsonObject = QJsonObject;
	using JsonParseError = QJsonParseError;
	using JsonValue = QJsonValue;
	using JSValue = QJSValue;
	using JSValueIterator = QJSValueIterator;
	using Joint = QJoint;
	using KeyEvent = QKeyEvent;
	using KeyEventTransition = QKeyEventTransition;
	using KeySequence = QKeySequence;
	using KeySequenceEdit = QKeySequenceEdit;
	using KeyValueIterator = QKeyValueIterator;
	using KeyEvent = QKeyEvent;
	using Label = QLabel;
	using Latin1Char = QLatin1Char;
	using Latin1String = QLatin1String;
	using Layout = QLayout;
	using LayoutItem = QLayoutItem;
	using LCDNumber = QLCDNumber;
	using Legend = QLegend;
	using LegendMarker = QLegendMarker;
	using LEInteger = QLEInteger;
	using Library = QLibrary;
	using LibraryInfo = QLibraryInfo;
	using LidFilter = QLidFilter;
	using LidReading = QLidReading;
	using LidSensor = QLidSensor;
	using LightFilter = QLightFilter;
	using LightReading = QLightReading;
	using LightSensor = QLightSensor;
	using Line = QLine;
	using LinearGradient = QLinearGradient;
	using LineEdit = QLineEdit;
	using LineF = QLineF;
	using LineSeries = QLineSeries;
	using LinkedList = QLinkedList;
	using LinkedListIterator = QLinkedListIterator;
	using List = QList;
	using ListIterator = QListIterator;
	using ListView = QListView;
	using ListWidget = QListWidget;
	using ListWidgetItem = QListWidgetItem;
	using Locale = QLocale;
	using LocalServer = QLocalServer;
	using LocalSocket = QLocalSocket;
	using LockFile = QLockFile;
	using LoggingCategory = QLoggingCategory;
	using LogValue3DAxisFormatter = QLogValue3DAxisFormatter;
	using LogValueAxis = QLogValueAxis;
	using LowEnergyAdvertisingData = QLowEnergyAdvertisingData;
	using LowEnergyAdvertisingParameters = QLowEnergyAdvertisingParameters;
	using LowEnergyCharacteristic = QLowEnergyCharacteristic;
	using LowEnergyCharacteristicData = QLowEnergyCharacteristicData;
	using LowEnergyConnectionParameters = QLowEnergyConnectionParameters;
	using LowEnergyController = QLowEnergyController;
	using LowEnergyDescriptor = QLowEnergyDescriptor;
	using LowEnergyDescriptorData = QLowEnergyDescriptorData;
	using LowEnergyService = QLowEnergyService;
	using LowEnergyServiceData = QLowEnergyServiceData;
	using Layer = QLayer;
	using LayerFilter = QLayerFilter;
	using LevelOfDetail = QLevelOfDetail;
	using LevelOfDetailBoundingSphere = QLevelOfDetailBoundingSphere;
	using LevelOfDetailSwitch = QLevelOfDetailSwitch;
	using LineWidth = QLineWidth;
	using MacCocoaViewContainer = QMacCocoaViewContainer;
	using MacNativeWidget = QMacNativeWidget;
	using MacPasteboardMime = QMacPasteboardMime;
	using MacToolBar = QMacToolBar;
	using MacToolBarItem = QMacToolBarItem;
	using Magnetometer = QMagnetometer;
	using MagnetometerFilter = QMagnetometerFilter;
	using MagnetometerReading = QMagnetometerReading;
	using MainWindow = QMainWindow;
	using Map = QMap;
	using MapIterator = QMapIterator;
	using Margins = QMargins;
	using MarginsF = QMarginsF;
	using MaskGenerator = QMaskGenerator;
	using Matrix = QMatrix;
	using Matrix4x4 = QMatrix4x4;
	using MdiArea = QMdiArea;
	using MdiSubWindow = QMdiSubWindow;
	using MediaAudioProbeControl = QMediaAudioProbeControl;
	using MediaAvailabilityControl = QMediaAvailabilityControl;
	using MediaBindableInterface = QMediaBindableInterface;
	using MediaContainerControl = QMediaContainerControl;
	using MediaContent = QMediaContent;
	using MediaControl = QMediaControl;
	using MediaGaplessPlaybackControl = QMediaGaplessPlaybackControl;
	using MediaNetworkAccessControl = QMediaNetworkAccessControl;
	using MediaObject = QMediaObject;
	using MediaPlayer = QMediaPlayer;
	using MediaPlayerControl = QMediaPlayerControl;
	using MediaPlaylist = QMediaPlaylist;
	using MediaRecorder = QMediaRecorder;
	using MediaRecorderControl = QMediaRecorderControl;
	using MediaResource = QMediaResource;
	using MediaService = QMediaService;
	using MediaServiceCameraInfoInterface = QMediaServiceCameraInfoInterface;
	using MediaServiceDefaultDeviceInterface = QMediaServiceDefaultDeviceInterface;
	using MediaServiceFeaturesInterface = QMediaServiceFeaturesInterface;
	using MediaServiceProviderPlugin = QMediaServiceProviderPlugin;
	using MediaServiceSupportedDevicesInterface = QMediaServiceSupportedDevicesInterface;
	using MediaServiceSupportedFormatsInterface = QMediaServiceSupportedFormatsInterface;
	using MediaStreamsControl = QMediaStreamsControl;
	using MediaTimeInterval = QMediaTimeInterval;
	using MediaTimeRange = QMediaTimeRange;
	using MediaVideoProbeControl = QMediaVideoProbeControl;
	using Menu = QMenu;
	using MenuBar = QMenuBar;
	using MessageAuthenticationCode = QMessageAuthenticationCode;
	using MessageBox = QMessageBox;
	using MessageLogContext = QMessageLogContext;
	using MessageLogger = QMessageLogger;
	using MetaClassInfo = QMetaClassInfo;
	using MetaDataReaderControl = QMetaDataReaderControl;
	using MetaDataWriterControl = QMetaDataWriterControl;
	using MetaEnum = QMetaEnum;
	using MetaMethod = QMetaMethod;
	using MetaObject = QMetaObject;
	using MetaProperty = QMetaProperty;
	using MetaType = QMetaType;
	using MimeData = QMimeData;
	using MimeDatabase = QMimeDatabase;
	using MimeType = QMimeType;
	using ModbusClient = QModbusClient;
	using ModbusDataUnit = QModbusDataUnit;
	using ModbusDevice = QModbusDevice;
	using ModbusDeviceIdentification = QModbusDeviceIdentification;
	using ModbusExceptionResponse = QModbusExceptionResponse;
	using ModbusPdu = QModbusPdu;
	using ModbusReply = QModbusReply;
	using ModbusRequest = QModbusRequest;
	using ModbusResponse = QModbusResponse;
	using ModbusRtuSerialMaster = QModbusRtuSerialMaster;
	using ModbusRtuSerialSlave = QModbusRtuSerialSlave;
	using ModbusServer = QModbusServer;
	using ModbusTcpClient = QModbusTcpClient;
	using ModbusTcpServer = QModbusTcpServer;
	using ModelIndex = QModelIndex;
	using MouseEvent = QMouseEvent;
	using MouseEventTransition = QMouseEventTransition;
	using MoveEvent = QMoveEvent;
	using Movie = QMovie;
	using MultiHash = QMultiHash;
	using MultiMap = QMultiMap;
	using MutableHashIterator = QMutableHashIterator;
	using MutableLinkedListIterator = QMutableLinkedListIterator;
	using MutableListIterator = QMutableListIterator;
	using MutableMapIterator = QMutableMapIterator;
	using MutableSetIterator = QMutableSetIterator;
	using MutableVectorIterator = QMutableVectorIterator;
	using Mutex = QMutex;
	using MutexLocker = QMutexLocker;
	using MouseEvent = QMouseEvent;
	using Material = QMaterial;
	using MemoryBarrier = QMemoryBarrier;
	using Mesh = QMesh;
	using MultiSampleAntiAliasing = QMultiSampleAntiAliasing;
	using NativeGestureEvent = QNativeGestureEvent;
	using NdefFilter = QNdefFilter;
	using NdefMessage = QNdefMessage;
	using NdefNfcSmartPosterRecord = QNdefNfcSmartPosterRecord;
	using NdefNfcTextRecord = QNdefNfcTextRecord;
	using NdefNfcUriRecord = QNdefNfcUriRecord;
	using NdefRecord = QNdefRecord;
	using NearFieldManager = QNearFieldManager;
	using NearFieldShareManager = QNearFieldShareManager;
	using NearFieldShareTarget = QNearFieldShareTarget;
	using NearFieldTarget = QNearFieldTarget;
	using NetworkAccessManager = QNetworkAccessManager;
	using NetworkAddressEntry = QNetworkAddressEntry;
	using NetworkCacheMetaData = QNetworkCacheMetaData;
	using NetworkConfiguration = QNetworkConfiguration;
	using NetworkConfigurationManager = QNetworkConfigurationManager;
	using NetworkCookie = QNetworkCookie;
	using NetworkCookieJar = QNetworkCookieJar;
	using NetworkDatagram = QNetworkDatagram;
	using NetworkDiskCache = QNetworkDiskCache;
	using NetworkInterface = QNetworkInterface;
	using NetworkProxy = QNetworkProxy;
	using NetworkProxyFactory = QNetworkProxyFactory;
	using NetworkProxyQuery = QNetworkProxyQuery;
	using NetworkReply = QNetworkReply;
	using NetworkRequest = QNetworkRequest;
	using NetworkSession = QNetworkSession;
	using NmeaPositionInfoSource = QNmeaPositionInfoSource;
	using Node = QNode;
	using NodeCommand = QNodeCommand;
	using NodeCreatedChange = QNodeCreatedChange;
	using NodeCreatedChangeBase = QNodeCreatedChangeBase;
	using NodeDestroyedChange = QNodeDestroyedChange;
	using NodeId = QNodeId;
	using NodeIdTypePair = QNodeIdTypePair;
	using NoDepthMask = QNoDepthMask;
	using NoDraw = QNoDraw;
	using OAuth1 = OQOAuth1;
	using OAuth1Signature = QOAuth1Signature;
	using OAuth2AuthorizationCodeFlow = QOAuth2AuthorizationCodeFlow;
	using Object = QObject;
	using ObjectCleanupHandler = QObjectCleanupHandler;
	using OffscreenSurface = QOffscreenSurface;
	using OpenGLBuffer = QOpenGLBuffer;
	using OpenGLContext = QOpenGLContext;
	using OpenGLContextGroup = QOpenGLContextGroup;
	using OpenGLDebugLogger = QOpenGLDebugLogger;
	using OpenGLDebugMessage = QOpenGLDebugMessage;
	using OpenGLExtraFunctions = QOpenGLExtraFunctions;
	using OpenGLFramebufferObject = QOpenGLFramebufferObject;
	using OpenGLFramebufferObjectFormat = QOpenGLFramebufferObjectFormat;
	using OpenGLFunctions = QOpenGLFunctions;
	using OpenGLFunctions_1_0 = QOpenGLFunctions_1_0;
	using OpenGLFunctions_1_1 = QOpenGLFunctions_1_1;
	using OpenGLFunctions_1_2 = QOpenGLFunctions_1_2;
	using OpenGLFunctions_1_3 = QOpenGLFunctions_1_3;
	using OpenGLFunctions_1_4 = QOpenGLFunctions_1_4;
	using OpenGLFunctions_1_5 = QOpenGLFunctions_1_5;
	using OpenGLFunctions_2_0 = QOpenGLFunctions_2_0;
	using OpenGLFunctions_2_1 = QOpenGLFunctions_2_1;
	using OpenGLFunctions_3_0 = QOpenGLFunctions_3_0;
	using OpenGLFunctions_3_1 = QOpenGLFunctions_3_1;
	using OpenGLFunctions_3_2_Compatibility = QOpenGLFunctions_3_2_Compatibility;
	using OpenGLFunctions_3_2_Core = QOpenGLFunctions_3_2_Core;
	using OpenGLFunctions_3_3_Compatibility = QOpenGLFunctions_3_3_Compatibility;
	using OpenGLFunctions_3_3_Core = QOpenGLFunctions_3_3_Core;
	using OpenGLFunctions_4_0_Compatibility = QOpenGLFunctions_4_0_Compatibility;
	using OpenGLFunctions_4_0_Core = QOpenGLFunctions_4_0_Core;
	using OpenGLFunctions_4_1_Compatibility = QOpenGLFunctions_4_1_Compatibility;
	using OpenGLFunctions_4_1_Core = QOpenGLFunctions_4_1_Core;
	using OpenGLFunctions_4_2_Compatibility = QOpenGLFunctions_4_2_Compatibility;
	using OpenGLFunctions_4_2_Core = QOpenGLFunctions_4_2_Core;
	using OpenGLFunctions_4_3_Compatibility = QOpenGLFunctions_4_3_Compatibility;
	using OpenGLFunctions_4_3_Core = QOpenGLFunctions_4_3_Core;
	using OpenGLFunctions_4_4_Compatibility = QOpenGLFunctions_4_4_Compatibility;
	using OpenGLFunctions_4_4_Core = QOpenGLFunctions_4_4_Core;
	using OpenGLFunctions_4_5_Compatibility = QOpenGLFunctions_4_5_Compatibility;
	using OpenGLFunctions_4_5_Core = QOpenGLFunctions_4_5_Core;
	using OpenGLFunctions_ES2 = QOpenGLFunctions_ES2;
	using OpenGLPaintDevice = QOpenGLPaintDevice;
	using OpenGLPixelTransferOptions = QOpenGLPixelTransferOptions;
	using OpenGLShader = QOpenGLShader;
	using OpenGLShaderProgram = QOpenGLShaderProgram;
	using OpenGLTexture = QOpenGLTexture;
	using OpenGLTextureBlitter = QOpenGLTextureBlitter;
	using OpenGLTimeMonitor = QOpenGLTimeMonitor;
	using OpenGLTimerQuery = QOpenGLTimerQuery;
	using OpenGLVersionProfile = QOpenGLVersionProfile;
	using OpenGLVertexArrayObject = QOpenGLVertexArrayObject;
	using OpenGLWidget = QOpenGLWidget;
	using OpenGLWindow = QOpenGLWindow;
	using OperatingSystemVersion = QOperatingSystemVersion;
	using OrientationFilter = QOrientationFilter;
	using OrientationReading = QOrientationReading;
	using OrientationSensor = QOrientationSensor;
	using qoutputrange = qoutputrange;
	using ObjGeometryLoader = ObjGeometryLoader;
	using ObjectPicker = QObjectPicker;
	using PagedPaintDevice = QPagedPaintDevice;
	using PageLayout = QPageLayout;
	using PageSetupDialog = QPageSetupDialog;
	using PageSize = QPageSize;
	using PaintDevice = QPaintDevice;
	using PaintDeviceWindow = QPaintDeviceWindow;
	using PaintEngine = QPaintEngine;
	using PaintEngineState = QPaintEngineState;
	using Painter = QPainter;
	using PainterPath = QPainterPath;
	using PainterPathStroker = QPainterPathStroker;
	using PaintEvent = QPaintEvent;
	using Pair = QPair;
	using Palette = QPalette;
	using PanGesture = QPanGesture;
	using ParallelAnimationGroup = QParallelAnimationGroup;
	using PauseAnimation = QPauseAnimation;
	using PdfWriter = QPdfWriter;
	using Pen = QPen;
	using PercentBarSeries = QPercentBarSeries;
	using PersistentModelIndex = QPersistentModelIndex;
	using Picture = QPicture;
	using PictureFormatPlugin = QPictureFormatPlugin;
	using PictureIO = QPictureIO;
	using PieLegendMarker = QPieLegendMarker;
	using PieSeries = QPieSeries;
	using PieSlice = QPieSlice;
	using PinchGesture = QPinchGesture;
	using PixelFormat = QPixelFormat;
	using Pixmap = QPixmap;
	using PixmapCache = QPixmapCache;
	using Place = QPlace;
	using PlaceAttribute = QPlaceAttribute;
	using PlaceCategory = QPlaceCategory;
	using PlaceContactDetail = QPlaceContactDetail;
	using PlaceContent = QPlaceContent;
	using PlaceContentReply = QPlaceContentReply;
	using PlaceContentRequest = QPlaceContentRequest;
	using PlaceDetailsReply = QPlaceDetailsReply;
	using PlaceEditorial = QPlaceEditorial;
	using PlaceIcon = QPlaceIcon;
	using PlaceIdReply = QPlaceIdReply;
	using PlaceImage = QPlaceImage;
	using PlaceManager = QPlaceManager;
	using PlaceManagerEngine = QPlaceManagerEngine;
	using PlaceMatchReply = QPlaceMatchReply;
	using PlaceMatchRequest = QPlaceMatchRequest;
	using PlaceProposedSearchResult = QPlaceProposedSearchResult;
	using PlaceRatings = QPlaceRatings;
	using PlaceReply = QPlaceReply;
	using PlaceResult = QPlaceResult;
	using PlaceReview = QPlaceReview;
	using PlaceSearchReply = QPlaceSearchReply;
	using PlaceSearchRequest = QPlaceSearchRequest;
	using PlaceSearchResult = QPlaceSearchResult;
	using PlaceSearchSuggestionReply = QPlaceSearchSuggestionReply;
	using PlaceSupplier = QPlaceSupplier;
	using PlaceUser = QPlaceUser;
	using PlainTextDocumentLayout = QPlainTextDocumentLayout;
	using PlainTextEdit = QPlainTextEdit;
	using PlatformSurfaceEvent = QPlatformSurfaceEvent;
	using PluginLoader = QPluginLoader;
	using Point = QPoint;
	using Pointer = QPointer;
	using PointF = QPointF;
	using PointingDeviceUniqueId = QPointingDeviceUniqueId;
	using PolarChart = QPolarChart;
	using Polygon = QPolygon;
	using PolygonF = QPolygonF;
	using PressureFilter = QPressureFilter;
	using PressureReading = QPressureReading;
	using PressureSensor = QPressureSensor;
	using PrintDialog = QPrintDialog;
	using PrintEngine = QPrintEngine;
	using Printer = QPrinter;
	using PrinterInfo = QPrinterInfo;
	using PrintPreviewDialog = QPrintPreviewDialog;
	using PrintPreviewWidget = QPrintPreviewWidget;
	using Process = QProcess;
	using ProcessEnvironment = QProcessEnvironment;
	using ProgressBar = QProgressBar;
	using ProgressDialog = QProgressDialog;
	using PropertyAnimation = QPropertyAnimation;
	using ProximityFilter = QProximityFilter;
	using ProximityReading = QProximityReading;
	using ProximitySensor = QProximitySensor;
	using ProxyStyle = QProxyStyle;
	using Button = QPushButton;
	using ParameterInfo = ParameterInfo;
	using PropertyNodeAddedChange = QPropertyNodeAddedChange;
	using PropertyNodeRemovedChange = QPropertyNodeRemovedChange;
	using PropertyUpdatedChange = QPropertyUpdatedChange;
	using PropertyUpdatedChangeBase = QPropertyUpdatedChangeBase;
	using PropertyValueAddedChange = QPropertyValueAddedChange;
	using PropertyValueAddedChangeBase = QPropertyValueAddedChangeBase;
	using PropertyValueRemovedChange = QPropertyValueRemovedChange;
	using PropertyValueRemovedChangeBase = QPropertyValueRemovedChangeBase;
	using PhysicalDeviceCreatedChange = QPhysicalDeviceCreatedChange;
	using PlyGeometryLoader = PlyGeometryLoader;
	using PropertyReaderInterface = PropertyReaderInterface;
	using PaintedTextureImage = QPaintedTextureImage;
	using Parameter = QParameter;
	using PickEvent = QPickEvent;
	using PickingSettings = QPickingSettings;
	using PickLineEvent = QPickLineEvent;
	using PickPointEvent = QPickPointEvent;
	using PickTriangleEvent = QPickTriangleEvent;
	using PointLight = QPointLight;
	using PointSize = QPointSize;
	using PolygonOffset = QPolygonOffset;
	using ProximityFilter = QProximityFilter;
	using QmlAbstractUrlInterceptor = QQQmlAbstractUrlInterceptor;
	using QmlApplicationEngine = QQmlApplicationEngine;
	using QmlComponent = QQmlComponent;
	using QmlContext = QQmlContext;
	using QmlEngine = QQmlEngine;
	using QmlError = QQmlError;
	using QmlExpression = QQmlExpression;
	using QmlExtensionPlugin = QQmlExtensionPlugin;
	using QmlFileSelector = QQmlFileSelector;
	using QmlImageProviderBase = QQmlImageProviderBase;
	using QmlIncubationController = QQmlIncubationController;
	using QmlIncubator = QQmlIncubator;
	using QmlListProperty = QQmlListProperty;
	using QmlListReference = QQmlListReference;
	using QmlNdefRecord = QQmlNdefRecord;
	using QmlNetworkAccessManagerFactory = QQmlNetworkAccessManagerFactory;
	using QmlParserStatus = QQmlParserStatus;
	using QmlProperty = QQmlProperty;
	using QmlPropertyMap = QQmlPropertyMap;
	using QmlPropertyValueSource = QQmlPropertyValueSource;
	using QmlScriptString = QQmlScriptString;
	using Quaternion = QQuaternion;
	using Queue = QQueue;
	using QuickAsyncImageProvider = QQuickAsyncImageProvider;
	using QuickFramebufferObject = QQuickFramebufferObject;
	using QuickImageProvider = QQuickImageProvider;
	using QuickImageResponse = QQuickImageResponse;
	using QuickItem = QQuickItem;
	using QuickItemGrabResult = QQuickItemGrabResult;
	using QuickPaintedItem = QQuickPaintedItem;
	using QuickRenderControl = QQuickRenderControl;
	using QuickStyle = QQuickStyle;
	using QuickTextDocument = QQuickTextDocument;
	using QuickTextureFactory = QQuickTextureFactory;
	using QuickView = QQuickView;
	using QuickWebEngineProfile = QQuickWebEngineProfile;
	using QuickWebEngineScript = QQuickWebEngineScript;
	using QuickWidget = QQuickWidget;
	using QuickWindow = QQuickWindow;
	using RadialGradient = QRadialGradient;
	using RadioButton = QRadioButton;
	using RadioData = QRadioData;
	using RadioDataControl = QRadioDataControl;
	using RadioTuner = QRadioTuner;
	using RadioTunerControl = QRadioTunerControl;
	using RandomGenerator = QRandomGenerator;
	using RandomGenerator64 = QRandomGenerator64;
	using RasterPaintEngine = QRasterPaintEngine;
	using RasterWindow = QRasterWindow;
	using RawFont = QRawFont;
	using ReadLocker = QReadLocker;
	using ReadWriteLock = QReadWriteLock;
	using Rect = QRect;
	using RectF = QRectF;
	using RegExp = QRegExp;
	using RegExpValidator = QRegExpValidator;
	using Region = QRegion;
	using RegularExpression = QRegularExpression;
	using RegularExpressionMatch = QRegularExpressionMatch;
	using RegularExpressionMatchIterator = QRegularExpressionMatchIterator;
	using RegularExpressionValidator = QRegularExpressionValidator;
	using RemoteObjectAbstractPersistedStore = QRemoteObjectAbstractPersistedStore;
	using RemoteObjectDynamicReplica = QRemoteObjectDynamicReplica;
	using RemoteObjectHost = QRemoteObjectHost;
	using RemoteObjectHostBase = QRemoteObjectHostBase;
	using RemoteObjectNode = QRemoteObjectNode;
	using RemoteObjectRegistry = QRemoteObjectRegistry;
	using RemoteObjectRegistryHost = QRemoteObjectRegistryHost;
	using RemoteObjectReplica = QRemoteObjectReplica;
	using ResizeEvent = QResizeEvent;
	using Resource = QResource;
	using Rgba64 = QRgba64;
	using RotationFilter = QRotationFilter;
	using RotationReading = QRotationReading;
	using RotationSensor = QRotationSensor;
	using RubberBand = QRubberBand;
	using Runnable = QRunnable;
	using RayCaster = QRayCaster;
	using RayCasterHit = QRayCasterHit;
	using RenderAspect = QRenderAspect;
	using RenderCapture = QRenderCapture;
	using RenderCaptureReply = QRenderCaptureReply;
	using RenderPass = QRenderPass;
	using RenderPassFilter = QRenderPassFilter;
	using RenderSettings = QRenderSettings;
	using RenderState = QRenderState;
	using RenderStateSet = QRenderStateSet;
	using RenderSurfaceSelector = QRenderSurfaceSelector;
	using RenderTarget = QRenderTarget;
	using RenderTargetOutput = QRenderTargetOutput;
	using RenderTargetSelector = QRenderTargetSelector;
	using QSaveFile = SQSaveFile;
	using Scatter3DSeries = QScatter3DSeries;
	using ScatterDataItem = QScatterDataItem;
	using ScatterDataProxy = QScatterDataProxy;
	using ScatterSeries = QScatterSeries;
	using ScopedArrayPointer = QScopedArrayPointer;
	using ScopedPointer = QScopedPointer;
	using ScopedValueRollback = QScopedValueRollback;
	using Screen = QScreen;
	using Scriptable = QScriptable;
	using ScriptClass = QScriptClass;
	using ScriptClassPropertyIterator = QScriptClassPropertyIterator;
	using ScriptContext = QScriptContext;
	using ScriptContextInfo = QScriptContextInfo;
	using ScriptEngine = QScriptEngine;
	using ScriptEngineAgent = QScriptEngineAgent;
	using ScriptEngineDebugger = QScriptEngineDebugger;
	using ScriptExtensionPlugin = QScriptExtensionPlugin;
	using ScriptProgram = QScriptProgram;
	using ScriptString = QScriptString;
	using ScriptSyntaxCheckResult = QScriptSyntaxCheckResult;
	using ScriptValue = QScriptValue;
	using ScriptValueIterator = QScriptValueIterator;
	using ScrollArea = QScrollArea;
	using ScrollBar = QScrollBar;
	using Scroller = QScroller;
	using ScrollerProperties = QScrollerProperties;
	using ScrollEvent = QScrollEvent;
	using ScrollPrepareEvent = QScrollPrepareEvent;
	using SctpServer = QSctpServer;
	using SctpSocket = QSctpSocket;
	using ScxmlCompiler = QScxmlCompiler;
	using ScxmlCppDataModel = QScxmlCppDataModel;
	using ScxmlDataModel = QScxmlDataModel;
	using ScxmlDynamicScxmlServiceFactory = QScxmlDynamicScxmlServiceFactory;
	using ScxmlEcmaScriptDataModel = QScxmlEcmaScriptDataModel;
	using ScxmlError = QScxmlError;
	using ScxmlEvent = QScxmlEvent;
	using ScxmlInvokableService = QScxmlInvokableService;
	using ScxmlInvokableServiceFactory = QScxmlInvokableServiceFactory;
	using ScxmlNullDataModel = QScxmlNullDataModel;
	using ScxmlStateMachine = QScxmlStateMachine;
	using ScxmlStaticScxmlServiceFactory = QScxmlStaticScxmlServiceFactory;
	using ScxmlTableData = QScxmlTableData;
	using Semaphore = QSemaphore;
	using SemaphoreReleaser = QSemaphoreReleaser;
	using Sensor = QSensor;
	using SensorBackend = QSensorBackend;
	using SensorBackendFactory = QSensorBackendFactory;
	using SensorChangesInterface = QSensorChangesInterface;
	using SensorFilter = QSensorFilter;
	using SensorGesture = QSensorGesture;
	using SensorGestureManager = QSensorGestureManager;
	using SensorGesturePluginInterface = QSensorGesturePluginInterface;
	using SensorGestureRecognizer = QSensorGestureRecognizer;
	using SensorManager = QSensorManager;
	using SensorPluginInterface = QSensorPluginInterface;
	using SensorReading = QSensorReading;
	using SequentialAnimationGroup = QSequentialAnimationGroup;
	using SequentialIterable = QSequentialIterable;
	using SerialPort = QSerialPort;
	using SerialPortInfo = QSerialPortInfo;
	using SessionManager = QSessionManager;
	using Set = QSet;
	using SetIterator = QSetIterator;
	using Settings = QSettings;
	using SGAbstractRenderer = QSGAbstractRenderer;
	using SGBasicGeometryNode = QSGBasicGeometryNode;
	using SGClipNode = QSGClipNode;
	using SGDynamicTexture = QSGDynamicTexture;
	using SGEngine = QSGEngine;
	using SGFlatColorMaterial = QSGFlatColorMaterial;
	using SGGeometry = QSGGeometry;
	using SGGeometryNode = QSGGeometryNode;
	using SGImageNode = QSGImageNode;
	using SGMaterial = QSGMaterial;
	using SGMaterialShader = QSGMaterialShader;
	using SGMaterialType = QSGMaterialType;
	using SGNode = QSGNode;
	using SGOpacityNode = QSGOpacityNode;
	using SGOpaqueTextureMaterial = QSGOpaqueTextureMaterial;
	using SGRectangleNode = QSGRectangleNode;
	using SGRendererInterface = QSGRendererInterface;
	using SGRenderNode = QSGRenderNode;
	using SGSimpleMaterial = QSGSimpleMaterial;
	using SGSimpleMaterialShader = QSGSimpleMaterialShader;
	using SGSimpleRectNode = QSGSimpleRectNode;
	using SGSimpleTextureNode = QSGSimpleTextureNode;
	using SGTexture = QSGTexture;
	using SGTextureMaterial = QSGTextureMaterial;
	using SGTextureProvider = QSGTextureProvider;
	using SGTransformNode = QSGTransformNode;
	using SGVertexColorMaterial = QSGVertexColorMaterial;
	using SharedData = QSharedData;
	using SharedDataPointer = QSharedDataPointer;
	using SharedMemory = QSharedMemory;
	using SharedPointer = QSharedPointer;
	using Shortcut = QShortcut;
	using ShortcutEvent = QShortcutEvent;
	using ShowEvent = QShowEvent;
	using SignalBlocker = QSignalBlocker;
	using SignalMapper = QSignalMapper;
	using SignalSpy = QSignalSpy;
	using SignalTransition = QSignalTransition;
	using SimpleXmlNodeModel = QSimpleXmlNodeModel;
	using Size = QSize;
	using SizeF = QSizeF;
	using SizeGrip = QSizeGrip;
	using SizePolicy = QSizePolicy;
	using Slider = QSlider;
	using SocketNotifier = QSocketNotifier;
	using SortFilterProxyModel = QSortFilterProxyModel;
	using Sound = QSound;
	using SoundEffect = QSoundEffect;
	using SourceLocation = QSourceLocation;
	using SpacerItem = QSpacerItem;
	using SpinBox = QSpinBox;
	using SplashScreen = QSplashScreen;
	using SplineSeries = QSplineSeries;
	using Splitter = QSplitter;
	using SplitterHandle = QSplitterHandle;
	using SqlDatabase = QSqlDatabase;
	using SqlDriver = QSqlDriver;
	using SqlDriverCreator = QSqlDriverCreator;
	using SqlDriverCreatorBase = QSqlDriverCreatorBase;
	using SqlDriverPlugin = QSqlDriverPlugin;
	using SqlError = QSqlError;
	using SqlField = QSqlField;
	using SqlIndex = QSqlIndex;
	using SqlQuery = QSqlQuery;
	using SqlQueryModel = QSqlQueryModel;
	using SqlRecord = QSqlRecord;
	using SqlRelation = QSqlRelation;
	using SqlRelationalDelegate = QSqlRelationalDelegate;
	using SqlRelationalTableModel = QSqlRelationalTableModel;
	using SqlResult = QSqlResult;
	using SqlTableModel = QSqlTableModel;
	using SslCertificate = QSslCertificate;
	using SslCertificateExtension = QSslCertificateExtension;
	using SslCipher = QSslCipher;
	using SslConfiguration = QSslConfiguration;
	using SslDiffieHellmanParameters = QSslDiffieHellmanParameters;
	using SslEllipticCurve = QSslEllipticCurve;
	using SslError = QSslError;
	using SslKey = QSslKey;
	using SslPreSharedKeyAuthenticator = QSslPreSharedKeyAuthenticator;
	using SslSocket = QSslSocket;
	using Stack = QStack;
	using StackedBarSeries = QStackedBarSeries;
	using StackedLayout = QStackedLayout;
	using StackedWidget = QStackedWidget;
	using StandardItem = QStandardItem;
	using StandardItemEditorCreator = QStandardItemEditorCreator;
	using StandardItemModel = QStandardItemModel;
	using StandardPaths = QStandardPaths;
	using State = QState;
	using StateMachine = QStateMachine;
	using StaticByteArrayMatcher = QStaticByteArrayMatcher;
	using StaticPlugin = QStaticPlugin;
	using StaticText = QStaticText;
	using StatusBar = QStatusBar;
	using StatusTipEvent = QStatusTipEvent;
	using StorageInfo = QStorageInfo;
	using String = QString;
	using StringList = QStringList;
	using StringListModel = QStringListModel;
	using StringMatcher = QStringMatcher;
	using StringRef = QStringRef;
	using StringView = QStringView;
	using Style = QStyle;
	using StyledItemDelegate = QStyledItemDelegate;
	using StyleFactory = QStyleFactory;
	using StyleHintReturn = QStyleHintReturn;
	using StyleHintReturnMask = QStyleHintReturnMask;
	using StyleHintReturnVariant = QStyleHintReturnVariant;
	using StyleHints = QStyleHints;
	using StyleOption = QStyleOption;
	using StyleOptionButton = QStyleOptionButton;
	using StyleOptionComboBox = QStyleOptionComboBox;
	using StyleOptionComplex = QStyleOptionComplex;
	using StyleOptionDockWidget = QStyleOptionDockWidget;
	using StyleOptionFocusRect = QStyleOptionFocusRect;
	using StyleOptionFrame = QStyleOptionFrame;
	using StyleOptionGraphicsItem = QStyleOptionGraphicsItem;
	using StyleOptionGroupBox = QStyleOptionGroupBox;
	using StyleOptionHeader = QStyleOptionHeader;
	using StyleOptionMenuItem = QStyleOptionMenuItem;
	using StyleOptionProgressBar = QStyleOptionProgressBar;
	using StyleOptionRubberBand = QStyleOptionRubberBand;
	using StyleOptionSizeGrip = QStyleOptionSizeGrip;
	using StyleOptionSlider = QStyleOptionSlider;
	using StyleOptionSpinBox = QStyleOptionSpinBox;
	using StyleOptionTab = QStyleOptionTab;
	using StyleOptionTabBarBase = QStyleOptionTabBarBase;
	using StyleOptionTabWidgetFrame = QStyleOptionTabWidgetFrame;
	using StyleOptionTitleBar = QStyleOptionTitleBar;
	using StyleOptionToolBar = QStyleOptionToolBar;
	using StyleOptionToolBox = QStyleOptionToolBox;
	using StyleOptionToolButton = QStyleOptionToolButton;
	using StyleOptionViewItem = QStyleOptionViewItem;
	using StylePainter = QStylePainter;
	using StylePlugin = QStylePlugin;
	using SupportedWritingSystems = QSupportedWritingSystems;
	using Surface = QSurface;
	using Surface3DSeries = QSurface3DSeries;
	using SurfaceDataItem = QSurfaceDataItem;
	using SurfaceDataProxy = QSurfaceDataProxy;
	using SurfaceFormat = QSurfaceFormat;
	using SvgGenerator = QSvgGenerator;
	using SvgRenderer = QSvgRenderer;
	using SvgWidget = QSvgWidget;
	using SwipeGesture = QSwipeGesture;
	using SyntaxHighlighter = QSyntaxHighlighter;
	using SysInfo = QSysInfo;
	using SystemSemaphore = QSystemSemaphore;
	using SystemTrayIcon = QSystemTrayIcon;
	using SceneChange = QSceneChange;
	using Skeleton = QSkeleton;
	using SkeletonLoader = QSkeletonLoader;
	using StaticPropertyUpdatedChangeBase = QStaticPropertyUpdatedChangeBase;
	using StaticPropertyValueAddedChangeBase = QStaticPropertyValueAddedChangeBase;
	using StaticPropertyValueRemovedChangeBase = QStaticPropertyValueRemovedChangeBase;
	using SceneLoader = QSceneLoader;
	using ScissorTest = QScissorTest;
	using ScreenRayCaster = QScreenRayCaster;
	using SeamlessCubemap = QSeamlessCubemap;
	using ShaderData = QShaderData;
	using ShaderProgram = QShaderProgram;
	using ShaderProgramBuilder = QShaderProgramBuilder;
	using SortPolicy = QSortPolicy;
	using SpotLight = QSpotLight;
	using StencilMask = QStencilMask;
	using StencilOperation = QStencilOperation;
	using StencilOperationArguments = QStencilOperationArguments;
	using StencilTest = QStencilTest;
	using StencilTestArguments = QStencilTestArguments;
	using StlGeometryLoader = StlGeometryLoader;
	using Transform = QTransform;
	using Technique = QTechnique;
	using TechniqueFilter = QTechniqueFilter;
	using Texture1D = QTexture1D;
	using Texture1DArray = QTexture1DArray;
	using Texture2D = QTexture2D;
	using Texture2DArray = QTexture2DArray;
	using Texture2DMultisample = QTexture2DMultisample;
	using Texture2DMultisampleArray = QTexture2DMultisampleArray;
	using Texture3D = QTexture3D;
	using TextureBuffer = QTextureBuffer;
	using TextureCubeMap = QTextureCubeMap;
	using TextureCubeMapArray = QTextureCubeMapArray;
	using TextureData = QTextureData;
	using TextureGenerator = QTextureGenerator;
	using TextureImage = QTextureImage;
	using TextureImageData = QTextureImageData;
	using TextureImageDataGenerator = QTextureImageDataGenerator;
	using TextureLoader = QTextureLoader;
	using TextureRectangle = QTextureRectangle;
	using TextureWrapMode = QTextureWrapMode;
	using TabBar = QTabBar;
	using TabletEvent = QTabletEvent;
	using TableView = QTableView;
	using TableWidget = QTableWidget;
	using TableWidgetItem = QTableWidgetItem;
	using TableWidgetSelectionRange = QTableWidgetSelectionRange;
	using TabWidget = QTabWidget;
	using TapAndHoldGesture = QTapAndHoldGesture;
	using TapFilter = QTapFilter;
	using TapGesture = QTapGesture;
	using TapReading = QTapReading;
	using TapSensor = QTapSensor;
	using TcpServer = QTcpServer;
	using TcpSocket = QTcpSocket;
	using TemporaryDir = QTemporaryDir;
	using TemporaryFile = QTemporaryFile;
	using TouchEventSequence = QTouchEventSequence;
	using TestEventList = QTestEventList;
	using TextBlock = QTextBlock;
	using TextBlockFormat = QTextBlockFormat;
	using TextBlockGroup = QTextBlockGroup;
	using TextBlockUserData = QTextBlockUserData;
	using TextBoundaryFinder = QTextBoundaryFinder;
	using TextBrowser = QTextBrowser;
	using TextCharFormat = QTextCharFormat;
	using TextCodec = QTextCodec;
	using TextCursor = QTextCursor;
	using TextDecoder = QTextDecoder;
	using TextDocument = QTextDocument;
	using TextDocumentFragment = QTextDocumentFragment;
	using TextDocumentWriter = QTextDocumentWriter;
	using TextEdit = QTextEdit;
	using TextEncoder = QTextEncoder;
	using TextFormat = QTextFormat;
	using TextFragment = QTextFragment;
	using TextFrame = QTextFrame;
	using TextFrameFormat = QTextFrameFormat;
	using TextImageFormat = QTextImageFormat;
	using TextInlineObject = QTextInlineObject;
	using TextItem = QTextItem;
	using TextLayout = QTextLayout;
	using TextLength = QTextLength;
	using TextLine = QTextLine;
	using TextList = QTextList;
	using TextListFormat = QTextListFormat;
	using TextObject = QTextObject;
	using TextObjectInterface = QTextObjectInterface;
	using TextOption = QTextOption;
	using TextStream = QTextStream;
	using TextTable = QTextTable;
	using TextTableCell = QTextTableCell;
	using TextTableCellFormat = QTextTableCellFormat;
	using TextTableFormat = QTextTableFormat;
	using TextToSpeech = QTextToSpeech;
	using TextToSpeechEngine = QTextToSpeechEngine;
	using TextToSpeechPlugin = QTextToSpeechPlugin;
	using Thread = QThread;
	using ThreadPool = QThreadPool;
	using ThreadStorage = QThreadStorage;
	using TileRules = QTileRules;
	using TiltFilter = QTiltFilter;
	using TiltReading = QTiltReading;
	using TiltSensor = QTiltSensor;
	using Time = QTime;
	using TimeEdit = QTimeEdit;
	using TimeLine = QTimeLine;
	using Timer = QTimer;
	using TimerEvent = QTimerEvent;
	using TimeZone = QTimeZone;
	using ToolBar = QToolBar;
	using ToolBox = QToolBox;
	using ToolButton = QToolButton;
	using ToolTip = QToolTip;
	using Touch3DInputHandler = QTouch3DInputHandler;
	using TouchDevice = QTouchDevice;
	using TouchEvent = QTouchEvent;
	using Transform = QTransform;
	using Translator = QTranslator;
	using TreeView = QTreeView;
	using TreeWidget = QTreeWidget;
	using TreeWidgetItem = QTreeWidgetItem;
	using TreeWidgetItemIterator = QTreeWidgetItemIterator;
	using tROClientFactory = QtROClientFactory;
	using tROServerFactory = QtROServerFactory;
	using UdpSocket = UQUdpSocket;
	using UiLoader = QUiLoader;
	using UndoCommand = QUndoCommand;
	using UndoGroup = QUndoGroup;
	using UndoStack = QUndoStack;
	using UndoView = QUndoView;
	using UnhandledException = QUnhandledException;
	using Url = QUrl;
	using UrlQuery = QUrlQuery;
	using Uuid = QUuid;
	using Viewport = VQViewport;
	using Validator = QValidator;
	using Value3DAxis = QValue3DAxis;
	using Value3DAxisFormatter = QValue3DAxisFormatter;
	using ValueAxis = QValueAxis;
	using Variant = QVariant;
	using VariantAnimation = QVariantAnimation;
	using VarLengthArray = QVarLengthArray;
	using VBarModelMapper = QVBarModelMapper;
	using VBoxLayout = QVBoxLayout;
	using VBoxPlotModelMapper = QVBoxPlotModelMapper;
	using VCandlestickModelMapper = QVCandlestickModelMapper;
	using Vector = QVector;
	using Vector2D = QVector2D;
	using Vector3D = QVector3D;
	using Vector4D = QVector4D;
	using VectorIterator = QVectorIterator;
	using VersionNumber = QVersionNumber;
	using VideoDeviceSelectorControl = QVideoDeviceSelectorControl;
	using VideoEncoderSettings = QVideoEncoderSettings;
	using VideoEncoderSettingsControl = QVideoEncoderSettingsControl;
	using VideoFilterRunnable = QVideoFilterRunnable;
	using VideoFrame = QVideoFrame;
	using VideoProbe = QVideoProbe;
	using VideoRendererControl = QVideoRendererControl;
	using VideoSurfaceFormat = QVideoSurfaceFormat;
	using VideoWidget = QVideoWidget;
	using VideoWidgetControl = QVideoWidgetControl;
	using VideoWindowControl = QVideoWindowControl;
	using Voice = QVoice;
	using VPieModelMapper = QVPieModelMapper;
	using VulkanDeviceFunctions = QVulkanDeviceFunctions;
	using VulkanExtension = QVulkanExtension;
	using VulkanFunctions = QVulkanFunctions;
	using VulkanInfoVector = QVulkanInfoVector;
	using VulkanInstance = QVulkanInstance;
	using VulkanLayer = QVulkanLayer;
	using VulkanWindow = QVulkanWindow;
	using VulkanWindowRenderer = QVulkanWindowRenderer;
	using VXYModelMapper = QVXYModelMapper;
	using WheelEvent = WQWheelEvent;
	using WaitCondition = QWaitCondition;
	using WaylandBufferRef = QWaylandBufferRef;
	using WaylandClient = QWaylandClient;
	using WaylandCompositor = QWaylandCompositor;
	using WaylandIviApplication = QWaylandIviApplication;
	using WaylandIviSurface = QWaylandIviSurface;
	using WaylandKeyboard = QWaylandKeyboard;
	using WaylandOutput = QWaylandOutput;
	using WaylandOutputMode = QWaylandOutputMode;
	using WaylandPointer = QWaylandPointer;
	using WaylandQuickItem = QWaylandQuickItem;
	using WaylandQuickShellSurfaceItem = QWaylandQuickShellSurfaceItem;
	using WaylandSeat = QWaylandSeat;
	using WaylandShellSurface = QWaylandShellSurface;
	using WaylandSurface = QWaylandSurface;
	using WaylandSurfaceGrabber = QWaylandSurfaceGrabber;
	using WaylandTouch = QWaylandTouch;
	using WaylandView = QWaylandView;
	using WaylandWlShell = QWaylandWlShell;
	using WaylandWlShellSurface = QWaylandWlShellSurface;
	using WaylandXdgPopupV5 = QWaylandXdgPopupV5;
	using WaylandXdgPopupV6 = QWaylandXdgPopupV6;
	using WaylandXdgShellV5 = QWaylandXdgShellV5;
	using WaylandXdgShellV6 = QWaylandXdgShellV6;
	using WaylandXdgSurfaceV5 = QWaylandXdgSurfaceV5;
	using WaylandXdgSurfaceV6 = QWaylandXdgSurfaceV6;
	using WaylandXdgToplevelV6 = QWaylandXdgToplevelV6;
	using WeakPointer = QWeakPointer;
	using WebChannel = QWebChannel;
	using WebChannelAbstractTransport = QWebChannelAbstractTransport;
	using WebEngineCookieStore = QWebEngineCookieStore;
	using WebEngineHttpRequest = QWebEngineHttpRequest;
	using WebEnginePage = QWebEnginePage;
	using WebEngineProfile = QWebEngineProfile;
	using WebEngineQuotaRequest = QWebEngineQuotaRequest;
	using WebEngineRegisterProtocolHandlerRequest = QWebEngineRegisterProtocolHandlerRequest;
	using WebEngineScript = QWebEngineScript;
	using WebEngineScriptCollection = QWebEngineScriptCollection;
	using WebEngineSettings = QWebEngineSettings;
	using WebEngineUrlRequestInfo = QWebEngineUrlRequestInfo;
	using WebEngineUrlRequestInterceptor = QWebEngineUrlRequestInterceptor;
	using WebEngineUrlRequestJob = QWebEngineUrlRequestJob;
	using WebEngineUrlSchemeHandler = QWebEngineUrlSchemeHandler;
	using WebEngineView = QWebEngineView;
	using WebSocket = QWebSocket;
	using WebSocketCorsAuthenticator = QWebSocketCorsAuthenticator;
	using WebSocketServer = QWebSocketServer;
	using WGLNativeContext = QWGLNativeContext;
	using WhatsThis = QWhatsThis;
	using WhatsThisClickedEvent = QWhatsThisClickedEvent;
	using WheelEvent = QWheelEvent;
	using Widget = QWidget;
	using WidgetAction = QWidgetAction;
	using WidgetItem = QWidgetItem;
	using Window = QWindow;
	using WindowStateChangeEvent = QWindowStateChangeEvent;
	using WindowsWindowFunctions = QWindowsWindowFunctions;
	using WinEventNotifier = QWinEventNotifier;
	using WinJumpList = QWinJumpList;
	using WinJumpListCategory = QWinJumpListCategory;
	using WinJumpListItem = QWinJumpListItem;
	using WinMime = QWinMime;
	using WinTaskbarButton = QWinTaskbarButton;
	using WinTaskbarProgress = QWinTaskbarProgress;
	using WinThumbnailToolBar = QWinThumbnailToolBar;
	using WinThumbnailToolButton = QWinThumbnailToolButton;
	using Wizard = QWizard;
	using WizardPage = QWizardPage;
	using WriteLocker = QWriteLocker;
	using X11Info = XQX11Info;
	using XcbWindowFunctions = QXcbWindowFunctions;
	using XmlAttributes = QXmlAttributes;
	using XmlContentHandler = QXmlContentHandler;
	using XmlDeclHandler = QXmlDeclHandler;
	using XmlDefaultHandler = QXmlDefaultHandler;
	using XmlDTDHandler = QXmlDTDHandler;
	using XmlEntityResolver = QXmlEntityResolver;
	using XmlErrorHandler = QXmlErrorHandler;
	using XmlFormatter = QXmlFormatter;
	using XmlInputSource = QXmlInputSource;
	using XmlItem = QXmlItem;
	using XmlLexicalHandler = QXmlLexicalHandler;
	using XmlLocator = QXmlLocator;
	using XmlName = QXmlName;
	using XmlNamePool = QXmlNamePool;
	using XmlNamespaceSupport = QXmlNamespaceSupport;
	using XmlNodeModelIndex = QXmlNodeModelIndex;
	using XmlParseException = QXmlParseException;
	using XmlQuery = QXmlQuery;
	using XmlReader = QXmlReader;
	using XmlResultItems = QXmlResultItems;
	using XmlSchema = QXmlSchema;
	using XmlSchemaValidator = QXmlSchemaValidator;
	using XmlSerializer = QXmlSerializer;
	using XmlSimpleReader = QXmlSimpleReader;
	using XmlStreamAttribute = QXmlStreamAttribute;
	using XmlStreamAttributes = QXmlStreamAttributes;
	using XmlStreamEntityDeclaration = QXmlStreamEntityDeclaration;
	using XmlStreamEntityResolver = QXmlStreamEntityResolver;
	using XmlStreamNamespaceDeclaration = QXmlStreamNamespaceDeclaration;
	using XmlStreamNotationDeclaration = QXmlStreamNotationDeclaration;
	using XmlStreamReader = QXmlStreamReader;
	using XmlStreamWriter = QXmlStreamWriter;
	using XYLegendMarker = QXYLegendMarker;
	using XYSeri = QXYSeri;
}
#endif // !REASONABLE_QT_NAMES